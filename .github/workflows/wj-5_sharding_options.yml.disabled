name: Playwright Sharded Tests with Historical Reports

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Test environment (prodCanada/ prod/ prodTest/ stage/ qa)"
        required: true
        default: "stage"
      test_pattern:
        description: "Test pattern (e.g., @Smoke, @TestDe|@DerivedScores, (?=.*@RDGBAS)(?=.*@DerivedScores), (?=.*@DerivedScores)(?=.*(@PHNMAN|@RDGBAS)), (?=.*@Smoke)(?=.*(@TestDe|@DerivedScores|@SingleTable|@MultiTable)))"
        required: true
        default: "(?=.*@RDGBAS)(?=.*@DerivedScores)"
      shard_count:
        description: "Number of shards"
        required: true
        default: "5"
        type: choice
        options:
          - "1"
          - "2"
          - "4"
          - "6"
          - "8"
          - "10"
          - "15"
      browser:
        description: "Browser to run tests on"
        required: true
        default: "chrome"
        type: choice
        options:
          - "chrome"
          - "firefox"
          - "webkit"
      num_retries:
        description: "Number of test retries"
        required: true
        default: "2"
        type: choice
        options:
          - "0"
          - "1"
          - "2"
          - "3"
      video_mode:
        description: "Video recording mode"
        required: true
        default: "on-first-retry"
        type: choice
        options:
          - "on"
          - "off"
          - "retain-on-failure"
          - "on-first-retry"
          - "retry-with-video"
      trace_mode:
        description: "Trace recording mode"
        required: true
        default: "retain-on-first-failure"
        type: choice
        options:
          - "on"
          - "off"
          - "on-all-retries"
          - "on-first-retry"
          - "retain-on-failure"
          - "retain-on-first-failure"
          - "retry-with-trace"
      pre_run_notes:
        description: "Notes before running the tests (purpose, context, etc.)"
        required: false
        type: string
      run_reason:
        description: "Short reason for triggering this run (e.g., 'Smoke test', 'Bug fix validation')"
        required: true
        default: "General test run"
        type: string

env:
  TEST_ENV: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'stage' }}
  NUM_RETRIES: ${{ github.event.inputs.num_retries }}
  VIDEO_MODE: ${{ github.event.inputs.video_mode }}
  TRACE_MODE: ${{ github.event.inputs.trace_mode }}
  SLOW_MODE_DELAY_IN_MS: 0
  CI: "true"
  PLAYWRIGHT_WORKERS: 1
  NODE_VERSION: "20"

permissions:
  contents: write
  pages: write
  id-token: write

# Keep the existing jobs (prepare, test, merge-reports) unchanged
# Only modify the deploy-report job

jobs:
  # [prepare, test, merge-reports jobs unchanged as per your instruction]
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          case ${{ github.event.inputs.shard_count }} in
            "1")
              echo "matrix={\"shard\":[1]}" >> $GITHUB_OUTPUT
              ;;
            "2")
              echo "matrix={\"shard\":[1,2]}" >> $GITHUB_OUTPUT
              ;;
            "4")
              echo "matrix={\"shard\":[1,2,3,4]}" >> $GITHUB_OUTPUT
              ;;
            "6")
              echo "matrix={\"shard\":[1,2,3,4,5,6]}" >> $GITHUB_OUTPUT
              ;;
            "8")
              echo "matrix={\"shard\":[1,2,3,4,5,6,7,8]}" >> $GITHUB_OUTPUT
              ;;
            "10")
              echo "matrix={\"shard\":[1,2,3,4,5,6,7,8,9,10]}" >> $GITHUB_OUTPUT
              ;;
            "15")
              echo "matrix={\"shard\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]}" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "matrix={\"shard\":[1]}" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Save pre-run notes
        if: inputs.pre_run_notes != ''
        run: |
          mkdir -p run-metadata
          echo "${{ inputs.pre_run_notes }}" > run-metadata/pre-run-notes.txt

      - name: Upload pre-run notes
        if: inputs.pre_run_notes != ''
        uses: actions/upload-artifact@v4
        with:
          name: run-metadata
          path: run-metadata/
          retention-days: 30

  test:
    needs: prepare
    name: "Shard ${{ matrix.shard }}"
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.49.1-noble
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Collect System Information
        run: |
          mkdir -p system-info
          echo "=== System Information for Shard ${{ matrix.shard }} ===" > system-info/specs.txt
          echo "CPU Information:" >> system-info/specs.txt
          lscpu >> system-info/specs.txt
          echo -e "\nMemory Information:" >> system-info/specs.txt
          free -h >> system-info/specs.txt
          echo -e "\nDisk Information:" >> system-info/specs.txt
          df -h >> system-info/specs.txt
          echo -e "\nSystem Load:" >> system-info/specs.txt
          uptime >> system-info/specs.txt
          echo -e "\nContainer Information:" >> system-info/specs.txt
          cat /etc/os-release >> system-info/specs.txt
      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      - name: Install dependencies
        run: |
          npm ci
          npx playwright install-deps
      - name: Install Playwright browsers
        run: npx playwright install ${{ inputs.browser }}
      - name: Run Playwright tests
        id: run_tests
        continue-on-error: true
        env:
          SHARD_COUNT: ${{ github.event.inputs.shard_count }}
          SHARD_NUMBER: ${{ matrix.shard }}
          VIDEO_MODE: ${{ github.event.inputs.video_mode }}
          TRACE_MODE: ${{ github.event.inputs.trace_mode }}
          CI: "true"
        run: |
          echo "Running shard ${{ matrix.shard }} of ${{ github.event.inputs.shard_count }}"
          npx cross-env test=${{ env.TEST_ENV }} npx playwright test \
            --grep '${{ github.event.inputs.test_pattern }}' \
            --project=${{ github.event.inputs.browser }} \
            --shard=${{ matrix.shard }}/${{ github.event.inputs.shard_count }} \
            --workers=1 \
            --retries=${{ env.NUM_RETRIES }}
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-shard-${{ matrix.shard }}
          path: |
            playwright-report/
            test-results/
            system-info/
          retention-days: 30
      - name: Create status file
        if: always()
        run: |
          mkdir -p test-status
          echo "${{ steps.run_tests.outcome }}" > test-status/status.txt
          echo "Shard: ${{ matrix.shard }}" >> test-status/status.txt
          echo "Environment: ${{ github.event.inputs.environment }}" >> test-status/status.txt
          echo "Browser: ${{ github.event.inputs.browser }}" >> test-status/status.txt
          echo "Test Pattern: ${{ github.event.inputs.test_pattern }}" >> test-status/status.txt
          echo "Retries: ${{ env.NUM_RETRIES }}" >> test-status/status.txt
          echo "Video Mode: ${{ github.event.inputs.video_mode }}" >> test-status/status.txt
          echo "Trace Mode: ${{ github.event.inputs.trace_mode }}" >> test-status/status.txt
      - name: Upload status
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-status-shard-${{ matrix.shard }}
          path: test-status/
          retention-days: 30

  merge-reports:
    name: Merge Reports
    if: always()
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Create merged report directory
        run: |
          mkdir -p merged-report
          current_date=$(date +%Y-%m-%d_%H-%M-%S)
          cat << 'EOF' > merged-report/index.html
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Playwright Test Reports</title>
            <style>
              :root {
                --primary-color: #0366d6;
                --success-color: #28a745;
                --failure-color: #dc3545;
                --neutral-color: #6c757d;
              }
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
                line-height: 1.6;
                margin: 0;
                padding: 20px;
                background: #f8f9fa;
                color: #24292e;
              }
              .container {
                max-width: 1200px;
                margin: 0 auto;
                background: white;
                padding: 2rem;
                border-radius: 10px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
              }
              h1 {
                color: var(--primary-color);
                border-bottom: 2px solid #eaecef;
                padding-bottom: 0.5rem;
                margin-bottom: 1.5rem;
              }
              .meta-info {
                background: #f6f8fa;
                padding: 1rem;
                border-radius: 6px;
                margin: 1rem 0;
                border: 1px solid #eaecef;
              }
              .meta-info p {
                margin: 0.5rem 0;
                display: flex;
                justify-content: space-between;
                align-items: center;
              }
              .meta-info strong {
                color: var(--neutral-color);
              }
              .report-container {
                margin: 2rem 0;
              }
              .report-wrapper {
                margin: 1rem 0;
                position: relative;
              }
              .report-link {
                display: block;
                padding: 1rem;
                background: white;
                border: 1px solid #e1e4e8;
                border-radius: 6px;
                text-decoration: none;
                color: var(--primary-color);
                position: relative;
                transition: all 0.2s ease;
                display: flex;
                align-items: center;
                justify-content: space-between;
              }
              .report-link:hover {
                border-color: var(--primary-color);
                background: #f6f8fa;
              }
              .expand-btn {
                background: none;
                border: none;
                cursor: pointer;
                font-size: 1.2rem;
                transition: transform 0.3s ease;
                padding: 0.5rem;
              }
              .expand-btn.active {
                transform: rotate(90deg);
              }
              .report-details {
                display: none;
                margin-top: 0.5rem;
                border: 1px solid #e1e4e8;
                border-radius: 0 0 6px 6px;
                overflow: hidden;
              }
              .report-details.show {
                display: block;
              }
              .report-details iframe {
                width: 100%;
                height: 600px;
                border: none;
              }
              .status-badge {
                padding: 0.25rem 0.75rem;
                border-radius: 2rem;
                font-size: 0.875rem;
                font-weight: 500;
                text-transform: uppercase;
              }
              .status-success {
                background: #e6ffed;
                color: var(--success-color);
              }
              .status-failure {
                background: #ffeef0;
                color: var(--failure-color);
              }
              .status-neutral {
                background: #f6f8fa;
                color: var(--neutral-color);
              }
              .system-info {
                background: #f8f9fa;
                padding: 1rem;
                border-radius: 6px;
                margin-top: 1rem;
                font-family: monospace;
                white-space: pre-wrap;
                max-height: 400px;
                overflow-y: auto;
                display: none;
              }
              .system-info-header {
                background: #f1f3f5;
                padding: 0.5rem;
                border-bottom: 1px solid #e1e4e8;
              }
              .system-info-toggle {
                background: none;
                border: none;
                cursor: pointer;
                font-size: 1rem;
                color: #586069;
                padding: 0.5rem;
                display: flex;
                align-items: center;
                gap: 0.5rem;
              }
              .system-info-toggle .toggle-arrow {
                display: inline-block;
                transition: transform 0.2s ease;
              }
              .system-info-toggle.active .toggle-arrow {
                transform: rotate(90deg);
              }
              .notes-section {
                background: #fff3cd;
                border: 1px solid #ffeeba;
                padding: 1rem;
                border-radius: 6px;
                margin: 1rem 0;
              }
              .notes-section h3 {
                color: #856404;
                margin-top: 0;
              }
              .post-notes-form {
                background: #e9ecef;
                padding: 1rem;
                border-radius: 6px;
                margin: 1rem 0;
              }
              .post-notes-form textarea {
                width: 100%;
                min-height: 100px;
                margin: 0.5rem 0;
                padding: 0.5rem;
                border: 1px solid #ced4da;
                border-radius: 4px;
              }
              .post-notes-form button {
                background: var(--primary-color);
                color: white;
                border: none;
                padding: 0.5rem 1rem;
                border-radius: 4px;
                cursor: pointer;
              }
              .post-notes-form button:hover {
                background: #0056b3;
              }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>Playwright Test Reports</h1>
          EOF
          # Add pre-run notes if they exist
          if [ -f "all-artifacts/run-metadata/pre-run-notes.txt" ]; then
            echo "<div class='notes-section'><h3>Pre-Run Notes</h3><p>$(cat all-artifacts/run-metadata/pre-run-notes.txt)</p></div>" >> merged-report/index.html
          fi
          # Add meta information
          cat << EOF >> merged-report/index.html
              <div class='meta-info'>
                <p><strong>Environment:</strong> ${{ inputs.environment }}</p>
                <p><strong>Browser:</strong> ${{ inputs.browser }}</p>
                <p><strong>Test Pattern:</strong> ${{ inputs.test_pattern }}</p>
                <p><strong>Total Shards:</strong> ${{ inputs.shard_count }}</p>
                <p><strong>Retries:</strong> ${{ inputs.num_retries }}</p>
                <p><strong>Video Mode:</strong> ${{ inputs.video_mode }}</p>
                <p><strong>Trace Mode:</strong> ${{ inputs.trace_mode }}</p>
                <p><strong>Last Updated:</strong> $current_date</p>
              </div>
              <div class='report-container'>
          EOF
          # Process each shard's report and system info
          for ((i=1; i<=${{ inputs.shard_count }}; i++)); do
            report_source="all-artifacts/playwright-report-shard-$i"
            status_file="all-artifacts/test-status-shard-$i/status.txt"
            system_info_file="$report_source/system-info/specs.txt"
            if [ -d "$report_source" ]; then
              mkdir -p "merged-report/shard-$i"
              cp -r "$report_source"/* "merged-report/shard-$i/"
              status="N/A"
              status_class="status-neutral"
              if [ -f "$status_file" ]; then
                status=$(head -n 1 "$status_file")
                if [ "$status" = "success" ]; then
                  status_class="status-success"
                else
                  status_class="status-failure"
                fi
              fi
              # Read system info
              system_info="System information not available"
              if [ -f "$system_info_file" ]; then
                system_info=$(cat "$system_info_file")
              fi
              cat << EOF >> merged-report/index.html
              <div class='report-wrapper'>
                <div class='report-link'>
                  <span>Shard $i Report</span>
                  <div>
                    <span class='status-badge ${status_class}'>$status</span>
                    <button class='expand-btn' data-shard='$i'>➤</button>
                  </div>
                </div>

                <div class='report-details' id='shard-$i-details'>
                  <div class='system-info-header'>
                    <button class='system-info-toggle' data-shard='$i'>
                      <span class="toggle-arrow">➤</span> System Information
                    </button>
                  </div>
                  <div class='system-info' id='system-info-$i'>
                    <pre>$system_info</pre>
                  </div>
                  <iframe data-src='./shard-$i/playwright-report/index.html'></iframe>
                </div>
              </div>
          EOF
            fi
          done
          # Add post-notes form and JavaScript (without Full Report section)
          cat << 'EOF' >> merged-report/index.html
              </div>
              <div class='post-notes-form'>
                <h3>Add Post-Run Notes</h3>
                <form id='postNotesForm'>
                  <textarea id='postNotes' placeholder='Enter your observations and notes about this test run...'></textarea>
                  <button type='submit'>Save Notes</button>
                </form>
              </div>
              <script>
                document.addEventListener('DOMContentLoaded', function() {
                  const iframes = document.querySelectorAll('.report-details iframe');
                  const observer = new IntersectionObserver((entries, observer) => {
                    entries.forEach(entry => {
                      if (entry.isIntersecting) {
                        const iframe = entry.target;
                        if (!iframe.src && iframe.dataset.src) {
                          iframe.src = iframe.dataset.src;
                        }
                        observer.unobserve(iframe);
                      }
                    });
                  }, { rootMargin: '0px 0px 200px 0px' });
                  iframes.forEach(iframe => observer.observe(iframe));
                  document.querySelectorAll('.system-info-toggle').forEach(toggle => {
                    toggle.addEventListener('click', (e) => {
                      const shardNum = e.currentTarget.dataset.shard;
                      const systemInfo = document.getElementById('system-info-' + shardNum);
                      const toggleBtn = e.currentTarget;
                      systemInfo.style.display = systemInfo.style.display === 'block' ? 'none' : 'block';
                      toggleBtn.classList.toggle('active');
                    });
                  });
                  document.querySelectorAll('.report-link').forEach(link => {
                    link.addEventListener('click', (e) => {
                      const shardNum = e.currentTarget.querySelector('.expand-btn').dataset.shard;
                      const detailsContainer = document.getElementById('shard-' + shardNum + '-details');
                      const expandBtn = e.currentTarget.querySelector('.expand-btn');
                      if (e.target.classList.contains('expand-btn')) {
                        detailsContainer.classList.toggle('show');
                        expandBtn.classList.toggle('active');
                      } else if (!e.target.classList.contains('expand-btn')) {
                        window.open('./shard-' + shardNum + '/playwright-report/index.html', '_blank');
                      }
                    });
                  });
                  document.getElementById('postNotesForm').addEventListener('submit', function(e) {
                    e.preventDefault();
                    const notes = document.getElementById('postNotes').value;
                    const savedNotes = {
                      text: notes,
                      timestamp: new Date().toISOString(),
                      runId: '${{ github.run_id }}'
                    };
                    const allNotes = JSON.parse(localStorage.getItem('playwrightTestNotes') || '[]');
                    allNotes.push(savedNotes);
                    localStorage.setItem('playwrightTestNotes', JSON.stringify(allNotes));
                    const notesSection = document.createElement('div');
                    notesSection.className = 'notes-section';
                    notesSection.innerHTML = '<h3>Post-Run Notes</h3><p>' + notes + '</p>';
                    const form = document.querySelector('.post-notes-form');
                    form.parentNode.insertBefore(notesSection, form);
                    document.getElementById('postNotes').value = '';
                    alert('Notes saved successfully!');
                  });
                  window.addEventListener('load', function() {
                    const allNotes = JSON.parse(localStorage.getItem('playwrightTestNotes') || '[]');
                    const runNotes = allNotes.filter(note => note.runId === '${{ github.run_id }}');
                    runNotes.forEach(note => {
                      const notesSection = document.createElement('div');
                      notesSection.className = 'notes-section';
                      notesSection.innerHTML = '<h3>Post-Run Notes</h3><p>' + note.text + '</p>';
                      const form = document.querySelector('.post-notes-form');
                      form.parentNode.insertBefore(notesSection, form);
                    });
                  });
                });
              </script>
            </div>
          </body>
          </html>
          EOF
      - name: Upload merged report artifact
        uses: actions/upload-artifact@v4
        with:
          name: merged-playwright-report
          path: merged-report/
          retention-days: 30

  # The deploy-report job is completely rewritten
  deploy-report:
    name: Deploy Report to GitHub Pages
    timeout-minutes: 10
    if: always()
    needs: merge-reports
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Set Run Info
        id: run-info
        run: |
          echo "run_number=$GITHUB_RUN_NUMBER" >> $GITHUB_OUTPUT
          # Use GitHub's run start time as the execution timestamp
          echo "timestamp=$(date -d "${{ github.event.workflow_run.created_at || github.event.created_at }}" +'%Y%m%d_%H%M%S')" >> $GITHUB_OUTPUT

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Initialize gh-pages if needed
        run: |
          if [ ! -d "gh-pages" ]; then
            mkdir -p gh-pages
            cd gh-pages
            git init
            git checkout -b gh-pages
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            echo "Initializing gh-pages branch..."
          fi

      - name: Download merged report
        uses: actions/download-artifact@v4
        with:
          name: merged-playwright-report
          path: new-report

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Organize reports
        run: |
          cd gh-pages

          # Create directory for new report
          mkdir -p "reports/${{ steps.run-info.outputs.run_number }}"

          # Copy files (excluding large ones)
          echo "Copying files to gh-pages branch directory..."
          rsync -av --exclude="*.zip" --exclude="*.png" --exclude="*.jpg" --exclude="*.jpeg" --exclude="*.mp4" --exclude="*.webm" \
            --exclude="*.gif" --exclude="*.trace" --exclude="*.webp" --max-size=100M \
            "../new-report/" "reports/${{ steps.run-info.outputs.run_number }}/"

          # Create and Update Run History
          CURRENT_RUN="{\"runNumber\": \"${{ steps.run-info.outputs.run_number }}\", \"timestamp\": \"${{ steps.run-info.outputs.timestamp }}\", \"runReason\": \"${{ inputs.run_reason }}\", \"environment\": \"${{ inputs.environment }}\", \"browser\": \"${{ inputs.browser }}\", \"testPattern\": \"${{ inputs.test_pattern }}\"}"
          mkdir -p "../new-report/metadata"
          echo "$CURRENT_RUN" > "../new-report/metadata/run-info.json"
          if [ -f "run-history.json" ]; then
            echo "Updating existing run history..."
            jq --argjson newRun "$CURRENT_RUN" '
              if (map(.runNumber == $newRun.runNumber) | any) then
                map(if .runNumber == $newRun.runNumber then $newRun else . end)
              else
                . + [$newRun]
              end | sort_by(.runNumber | tonumber) | reverse
            ' run-history.json > run-history.tmp
            mv run-history.tmp run-history.json
          else
            echo "Creating new run history..."
            echo "[$CURRENT_RUN]" > run-history.json
          fi
          echo "Contents of run history file:"
          cat run-history.json

          # Handle large files (unchanged logic)
          echo "Checking for large files..."
          large_files=()
          large_file_sizes=()
          max_file_size=$((100 * 1024 * 1024)) # 100MB in bytes
          find ../new-report -type f -size +${max_file_size}c | while read -r file; do
            file_size=$(du -b "$file" | cut -f1)
            file_size_mb=$(echo "scale=2; $file_size / 1048576" | bc)
            relative_path=${file#../new-report/}
            large_files+=("$relative_path")
            large_file_sizes+=("$file_size_mb")
            echo "Large file detected: $relative_path ($file_size_mb MB)"
          done > large_files_list.txt

          if [ -s large_files_list.txt ]; then
            echo "Creating placeholders for large files..."
            mkdir -p "reports/${{ steps.run-info.outputs.run_number }}/large-files-info"
            cp large_files_list.txt "reports/${{ steps.run-info.outputs.run_number }}/large-files-info/"
            cat > "reports/${{ steps.run-info.outputs.run_number }}/large-files-info/index.html" << EOF
            <!DOCTYPE html>
            <html>
            <head>
              <title>Large Files Information</title>
              <style>
                body { font-family: -apple-system, system-ui, sans-serif; padding: 20px; max-width: 800px; margin: 0 auto; }
                .warning { background: #fff3cd; border-left: 4px solid #ffc107; padding: 15px; margin-bottom: 20px; }
                .info-box { background: #e7f5fe; border-left: 4px solid #0366d6; padding: 15px; margin-bottom: 20px; }
                table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                th, td { text-align: left; padding: 8px; border-bottom: 1px solid #ddd; }
                th { background-color: #f6f8fa; }
                .artifact-link { display: inline-block; background: #0366d6; color: white; padding: 6px 12px; 
                                text-decoration: none; border-radius: 4px; margin-top: 10px; }
                .artifact-link:hover { background: #0258b8; }
              </style>
            </head>
            <body>
              <h1>Large Files Excluded from GitHub Pages</h1>
              <div class="warning">
                <h3>⚠️ Some files were too large to be included in the GitHub Pages deployment</h3>
                <p>GitHub has a 100MB file size limit for regular Git repositories. The files listed below exceeded this limit 
                and were excluded from the deployment.</p>
              </div>
              <div class="info-box">
                <h3>📋 Access Complete Artifacts</h3>
                <p>You can access the complete test results, including these large files, from the GitHub Actions artifacts.</p>
                <p>The artifacts are stored for 30 days and contain all test results, including videos, traces, and screenshots.</p>
                <p>To download the artifacts:</p>
                <ol>
                  <li>Go to the GitHub Actions run page (link below)</li>
                  <li>Scroll down to the "Artifacts" section</li>
                  <li>Download the artifact that includes your files of interest</li>
                </ol>
                <p><strong>Note:</strong> Large video and trace files are typically most useful for debugging test failures.</p>
              </div>
              <h2>Excluded Files</h2>
              <table>
                <tr>
                  <th>File Path</th>
                  <th>Size</th>
                </tr>
            EOF
            while IFS= read -r line; do
              if [[ $line == Large\ file\ detected:* ]]; then
                file_path=$(echo "$line" | sed 's/Large file detected: \(.*\) (\(.*\) MB)/\1/')
                file_size=$(echo "$line" | sed 's/Large file detected: \(.*\) (\(.*\) MB)/\2/')
                echo "          <tr>
                  <td>$file_path</td>
                  <td>$file_size MB</td>
                </tr>" >> "reports/${{ steps.run-info.outputs.run_number }}/large-files-info/index.html"
                placeholder_dir=$(dirname "reports/${{ steps.run-info.outputs.run_number }}/$file_path")
                mkdir -p "$placeholder_dir"
                placeholder_file_html="${placeholder_dir}/$(basename "${file_path%.*}").html"
                cat > "$placeholder_file_html" << EOF_PLACEHOLDER
                <!DOCTYPE html>
                <html>
                <head>
                  <title>Large File Placeholder</title>
                  <style>
                    body { font-family: -apple-system, system-ui, sans-serif; padding: 20px; max-width: 800px; margin: 0 auto; text-align: center; }
                    .warning { background: #fff3cd; border-left: 4px solid #ffc107; padding: 15px; margin-bottom: 20px; text-align: left; }
                    .info { margin: 30px 0; }
                    .link { display: inline-block; background: #0366d6; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; }
                    .link:hover { background: #0258b8; }
                  </style>
                </head>
                <body>
                  <h1>Large File Placeholder</h1>
                  <div class="warning">
                    <h3>⚠️ This file was too large to be included in GitHub Pages</h3>
                    <p>The original file <strong>$(basename "$file_path")</strong> is $file_size MB, which exceeds GitHub's 100MB limit.</p>
                  </div>
                  <div class="info">
                    <p>Please refer to the GitHub Actions artifacts to access the complete file.</p>
                  </div>
                  <a href="../../large-files-info/index.html" class="link">View All Large Files Info</a>
                </body>
                </html>
          EOF_PLACEHOLDER
              fi
            done < large_files_list.txt
            cat >> "reports/${{ steps.run-info.outputs.run_number }}/large-files-info/index.html" << EOF
              </table>
              <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" 
                 class="artifact-link" target="_blank" style="font-size: 16px; padding: 12px 24px; text-align: center; display: block; margin: 20px auto; max-width: 300px;">
                📥 Download Complete Artifacts
              </a>
              <p style="text-align: center; margin-top: 5px; color: #586069;">Artifacts include all videos, traces, and large files</p>
            </body>
            </html>
          EOF
            if [ -f "reports/${{ steps.run-info.outputs.run_number }}/index.html" ]; then
              sed -i '/<body>/a \
              <div style="background: #fff3cd; border-left: 4px solid #ffc107; padding: 15px; margin: 20px 0;"> \
                <h3 style="margin-top: 0;">⚠️ Some files were too large to be included in this report</h3> \
                <p>Some large files from test results have been excluded from this GitHub Pages deployment due to GitHub file size limits.</p> \
                <p><a href="large-files-info/index.html" style="color: #0366d6;">View information about excluded files</a></p> \
              </div>' "reports/${{ steps.run-info.outputs.run_number }}/index.html"
            fi
          fi


          # Collect information about all existing reports with deduplication
          REPORTS_DATA=""
          declare -A seen_runs
          if [ -d "reports" ]; then
            for RUN_DIR in reports/*; do
              if [ -d "$RUN_DIR" ]; then
                METADATA_FILE="$RUN_DIR/metadata/run-info.json"
                if [ -f "$METADATA_FILE" ]; then
                  RUN_NUM=$(jq -r '.runNumber' "$METADATA_FILE")
                  TIMESTAMP=$(jq -r '.timestamp' "$METADATA_FILE")
                  RUN_REASON=$(jq -r '.runReason // "No reason provided"' "$METADATA_FILE")
                  if [ -z "${seen_runs[$RUN_NUM]}" ]; then
                    REPORTS_DATA="${REPORTS_DATA}addReportEntry('$RUN_NUM', '$TIMESTAMP', '$RUN_REASON');\n    "
                    seen_runs[$RUN_NUM]=1
                  fi
                else
                  RUN_NUM=$(basename "$RUN_DIR")
                  TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
                  RUN_REASON="No metadata available"
                  if [ -z "${seen_runs[$RUN_NUM]}" ]; then
                    REPORTS_DATA="${REPORTS_DATA}addReportEntry('$RUN_NUM', '$TIMESTAMP', '$RUN_REASON');\n    "
                    seen_runs[$RUN_NUM]=1
                  fi
                fi
              fi
            done
          fi

          # Add current run (only if not already added)
          CURRENT_TIMESTAMP="${{ steps.run-info.outputs.timestamp }}"
          CURRENT_REASON="${{ inputs.run_reason }}"
          if [ -z "${seen_runs[${{ steps.run-info.outputs.run_number }}]}" ]; then
            REPORTS_DATA="${REPORTS_DATA}addReportEntry('${{ steps.run-info.outputs.run_number }}', '$CURRENT_TIMESTAMP', '$CURRENT_REASON');"
            seen_runs[${{ steps.run-info.outputs.run_number }}]=1
          fi

          # Create or update main index with run reason
          cat > index.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
            <title>Playwright Test Reports History</title>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
              body {
                font-family: -apple-system, system-ui, sans-serif;
                margin: 0;
                padding: 0;
                background: #f6f8fa;
                display: flex;
                min-height: 100vh;
              }
              .sidebar {
                width: 280px;
                background: #24292e;
                color: white;
                padding: 20px;
                box-sizing: border-box;
                overflow-y: auto;
                height: 100vh;
                position: fixed;
                left: 0;
                top: 0;
              }
              .main-content {
                flex: 1;
                margin-left: 280px;
                padding: 20px;
                box-sizing: border-box;
              }
              .header {
                background: white;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                margin-bottom: 20px;
              }
              .reports-container {
                display: grid;
                gap: 15px;
                grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
              }
              .report-card, .run-item {
                background: white;
                padding: 15px;
                border-radius: 8px;
                box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                transition: transform 0.2s;
                margin-bottom: 10px;
              }
              .report-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 6px rgba(0,0,0,0.1);
              }
              .run-item {
                background: #2f363d;
                cursor: pointer;
              }
              .run-item:hover, .run-item.active {
                background: #444d56;
              }
              .run-item h3 {
                margin-top: 0;
                color: #58a6ff;
              }
              .report-link {
                text-decoration: none;
                color: #0366d6;
              }
              .report-meta, .run-meta {
                color: #586069;
                font-size: 0.9em;
                margin-top: 10px;
              }
              .run-meta {
                color: #8b949e;
              }
              .filter-bar {
                background: #2f363d;
                padding: 15px;
                border-radius: 8px;
                margin-bottom: 20px;
              }
              .search-input {
                padding: 8px;
                border: 1px solid #444d56;
                border-radius: 4px;
                background: #1f2428;
                color: white;
                width: 100%;
                box-sizing: border-box;
                margin-bottom: 10px;
              }
              .sort-select {
                padding: 8px;
                border: 1px solid #444d56;
                border-radius: 4px;
                background: #1f2428;
                color: white;
                width: 100%;
                box-sizing: border-box;
              }
              .sidebar-header {
                margin-top: 0;
                color: white;
                border-bottom: 1px solid #444d56;
                padding-bottom: 10px;
                margin-bottom: 15px;
              }
              @media (max-width: 768px) {
                body {
                  flex-direction: column;
                }
                .sidebar {
                  width: 100%;
                  height: auto;
                  position: relative;
                }
                .main-content {
                  margin-left: 0;
                }
              }
            </style>
          </head>
          <body>
            <div class="sidebar">
              <h2 class="sidebar-header">Run History</h2>
              <div class="filter-bar">
                <input type="text" class="search-input" placeholder="Search reasons or runs..." id="sidebarSearch">
                <select class="sort-select" id="sidebarSort">
                  <option value="newest">Newest First</option>
                  <option value="oldest">Oldest First</option>
                </select>
              </div>
              <div id="runsList">
                <!-- Run items will be dynamically inserted here -->
              </div>
            </div>
            
            <div class="main-content">
              <div class="header">
                <h1>Playwright Test Reports History</h1>
                <p>Historical test execution reports with retention</p>
              </div>
              <div class="filter-bar" style="background: white;">
                <input type="text" class="search-input" placeholder="Search reports..." id="searchInput" style="background: white; color: black; border: 1px solid #ddd;">
                <select class="sort-select" id="sortSelect" style="background: white; color: black; border: 1px solid #ddd;">
                  <option value="newest">Newest First</option>
                  <option value="oldest">Oldest First</option>
                </select>
              </div>
              <div class="reports-container" id="reportsContainer">
                <!-- Report entries will be dynamically inserted here -->
              </div>
            </div>
            
            <script>
              // Load the run history from the JSON file
              fetch('./run-history.json')
                .then(response => {
                  if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                  return response.json();
                })
                .then(runHistory => {
                  if (!Array.isArray(runHistory) || runHistory.length === 0) {
                    throw new Error('Run history is empty or invalid');
                  }
                  // Normalize and sort by runNumber descending
                  const normalizedHistory = runHistory.map(run => ({
                    ...run,
                    runNumber: String(run.runNumber) // Ensure consistency
                  })).sort((a, b) => parseInt(b.runNumber) - parseInt(a.runNumber));

                  populateRunsList(normalizedHistory);
                  populateReportsContainer(normalizedHistory);
                  setupEventListeners(normalizedHistory);
                })
                .catch(error => {
                  console.error('Error loading run history:', error);
                  document.getElementById('runsList').innerHTML = '<p style="color: #f85149;">Failed to load run history. Check console.</p>';
                  document.getElementById('reportsContainer').innerHTML = '<p style="color: #f85149;">No reports available.</p>';
                });
              
                function populateRunsList(runHistory) {
                  const runsList = document.getElementById('runsList');
                  runsList.innerHTML = '';

                  // Sort by run number descending by default
                  runHistory.sort((a, b) => parseInt(b.runNumber) - parseInt(a.runNumber));

                  runHistory.forEach(run => {
                    const runItem = document.createElement('div');
                    runItem.className = 'run-item';
                    runItem.dataset.runNumber = run.runNumber;

                  // Format the timestamp
                  let formattedDate = 'Unknown date';
                  if (run.timestamp) {
                    try {
                      const parts = run.timestamp.split('_');
                      if (parts.length === 2) {
                        const datePart = parts[0];
                        const timePart = parts[1];
                        const year = datePart.substring(0, 4);
                        const month = datePart.substring(4, 6);
                        const day = datePart.substring(6, 8);
                        const hour = timePart.substring(0, 2);
                        const minute = timePart.substring(2, 4);
                        const second = timePart.substring(4, 6);
                        const date = new Date(Date.UTC(year, month-1, day, hour, minute, second));
                        formattedDate = date.toLocaleString();
                      }
                    } catch (e) {
                      console.warn('Error formatting date:', e);
                    }
                  }
                    

                  runItem.innerHTML = \`
                    <h3>Run #\${run.runNumber}</h3>
                    <div class="run-meta">
                      <div>Executed: \${formattedDate}</div>
                      <div>Reason: \${run.runReason || 'Not specified'}</div>
                      <div>Environment: \${run.environment || 'Not specified'}</div>
                      <div>Browser: \${run.browser || 'Not specified'}</div>
                    </div>
                  \`;

                  runItem.addEventListener('click', () => {
                    // Navigate to the report when clicked
                    window.location.href = \`./reports/\${run.runNumber}/index.html\`;
                  });

                  runsList.appendChild(runItem);
                });
                 // Log the number of runs displayed
                console.log(`Displayed ${runHistory.length} runs in the sidebar`);
              }

              function populateReportsContainer(runHistory) {
                const container = document.getElementById('reportsContainer');
                container.innerHTML = '';

                runHistory.forEach(run => {
                  const card = document.createElement('div');
                  card.className = 'report-card';

                  let formattedDate = 'Unknown date';
                  if (run.timestamp) {
                    try {
                      const parts = run.timestamp.split('_');
                      if (parts.length === 2) {
                        const datePart = parts[0];
                        const timePart = parts[1];
                        const year = datePart.substring(0, 4);
                        const month = datePart.substring(4, 6);
                        const day = datePart.substring(6, 8);
                        const hour = timePart.substring(0, 2);
                        const minute = timePart.substring(2, 4);
                        const second = timePart.substring(4, 6);
                        const date = new Date(Date.UTC(year, month-1, day, hour, minute, second));
                        formattedDate = date.toLocaleString();
                      }
                    } catch (e) {
                      console.warn('Error formatting date:', e);
                    }
                  }

                  card.innerHTML = \`
                    <a href="./reports/\${run.runNumber}/index.html" class="report-link">
                      <h3>Run #\${run.runNumber}</h3>
                      <div class="report-meta">
                        <div>Executed: \${formattedDate}</div>
                        <div>Reason: \${run.runReason || 'Not specified'}</div>
                        <div>Environment: \${run.environment || 'Not specified'}</div>
                        <div>Browser: \${run.browser || 'Not specified'}</div>
                      </div>
                    </a>
                  \`;

                  container.appendChild(card);
                });
              }

              function setupEventListeners(originalRunHistory) {
                // Main search
                document.getElementById('searchInput').addEventListener('input', (e) => {
                  filterReports(e.target.value.toLowerCase());
                });

                // Main sort
                document.getElementById('sortSelect').addEventListener('change', (e) => {
                  sortReports(e.target.value);
                });

                // Sidebar search
                document.getElementById('sidebarSearch').addEventListener('input', (e) => {
                  filterSidebar(e.target.value.toLowerCase());
                });

                // Sidebar sort
                document.getElementById('sidebarSort').addEventListener('change', (e) => {
                  sortSidebar(e.target.value);
                });
              }

              function filterReports(searchTerm) {
                const cards = document.querySelectorAll('.report-card');
                cards.forEach(card => {
                  const text = card.textContent.toLowerCase();
                  card.style.display = text.includes(searchTerm) ? '' : 'none';
                });
              }

              function sortReports(sortOrder) {
                const container = document.getElementById('reportsContainer');
                const cards = Array.from(container.children);

                cards.sort((a, b) => {
                  const aNum = parseInt(a.querySelector('h3').textContent.split('#')[1]);
                  const bNum = parseInt(b.querySelector('h3').textContent.split('#')[1]);
                  return sortOrder === 'newest' ? bNum - aNum : aNum - bNum;
                });

                container.innerHTML = '';
                cards.forEach(card => container.appendChild(card));
              }

              function filterSidebar(searchTerm) {
                const items = document.querySelectorAll('.run-item');
                items.forEach(item => {
                  const text = item.textContent.toLowerCase();
                  item.style.display = text.includes(searchTerm) ? '' : 'none';
                });
              }

              function sortSidebar(sortOrder) {
                const container = document.getElementById('runsList');
                const items = Array.from(container.children);

                items.sort((a, b) => {
                  const aNum = parseInt(a.dataset.runNumber);
                  const bNum = parseInt(b.dataset.runNumber);
                  return sortOrder === 'newest' ? bNum - aNum : aNum - bNum;
                });

                container.innerHTML = '';
                items.forEach(item => container.appendChild(item));
              }
            </script>
          </body>
          </html>
          EOF

      - name: Configure Git
        run: |
          cd gh-pages
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git remote set-url origin https://${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git

      - name: Commit and Push Changes
        run: |
          cd gh-pages
          git fetch origin gh-pages

          # Check if gh-pages branch exists locally
          if [ -z "$(git branch --list gh-pages)" ]; then
            git checkout -b gh-pages
          else
            git checkout gh-pages
          fi

          # Stage and commit changes from Organize reports before pulling
          if [ -n "$(git status --porcelain)" ]; then
            echo "Committing changes before pulling..."
            git add .
            git commit -m "Add test report for run #${{ steps.run-info.outputs.run_number }} (Reason: ${{ inputs.run_reason }}) - Initial commit"
          fi

          # Pull with rebase to integrate upstream changes
          git pull origin gh-pages --rebase --allow-unrelated-histories

          # Commit any additional changes after rebase (unlikely but possible)
          if [ -n "$(git status --porcelain)" ]; then
            echo "Committing additional changes after rebase..."
            git add .
            git commit -m "Add test report for run #${{ steps.run-info.outputs.run_number }} (Reason: ${{ inputs.run_reason }}) - Post-rebase commit"
          fi

          # Push with retry logic if there are commits ahead
          if [ "$(git log origin/gh-pages..HEAD --oneline | wc -l)" -gt 0 ]; then
            MAX_RETRIES=3
            RETRY_COUNT=0
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if git push origin gh-pages; then
                echo "Push successful"
                break
              else
                RETRY_COUNT=$((RETRY_COUNT+1))
                echo "Push failed, attempt $RETRY_COUNT of $MAX_RETRIES"
                git fetch origin gh-pages
                git rebase origin/gh-pages
                [ $RETRY_COUNT -eq $MAX_RETRIES ] && exit 1
                sleep 5
              fi
            done
          else
            echo "No changes to push after rebase"
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: gh-pages

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
